package main

import (
	"encoding/json"
	"fmt"
	"syscall/js"
)

const (
	isWasm bool = true
)

var game *Game

func main() {
	fmt.Println("WebAssembly loaded!")

	setGlobals()
	setGameAPI()

    <-make(chan bool)
}

func setGlobals() {
	js.Global().Set("frameMillis", frameMillis)

	js.Global().Set("pingType", int(pingType))
	js.Global().Set("candidateType", int(candidateType))
	js.Global().Set("offerType", int(offerType))
	js.Global().Set("answerType", int(answerType))
	js.Global().Set("voiceCandidateType", int(voiceCandidateType))

	js.Global().Set("voiceOfferType", int(voiceOfferType))
	js.Global().Set("voiceAnswerType", int(voiceAnswerType))
	js.Global().Set("initType", int(initType))
	js.Global().Set("joinType", int(joinType))
	js.Global().Set("leftType", int(leftType))

	js.Global().Set("initVoiceType", int(initVoiceType))
	js.Global().Set("joinVoiceType", int(joinVoiceType))
	js.Global().Set("leftVoiceType", int(leftVoiceType))
	js.Global().Set("chatType", int(chatType))
	js.Global().Set("keyType", int(keyType))

	js.Global().Set("gameStateType", int(gameStateType))
	js.Global().Set("playerInitType", int(playerInitType))
	js.Global().Set("levelInitType", int(levelInitType))
	js.Global().Set("objectInitType", int(objectInitType))

	js.Global().Set("upKey", int(upKey))
	js.Global().Set("downKey", int(downKey))
	js.Global().Set("leftKey", int(leftKey))
	js.Global().Set("rightKey", int(rightKey))
	js.Global().Set("dashKey", int(dashKey))
	js.Global().Set("mouseClick", int(mouseClick))
	js.Global().Set("altMouseClick", int(altMouseClick))

	js.Global().Set("playerObjectClass", int(playerObjectClass))
	js.Global().Set("wallObjectClass", int(wallObjectClass))
	js.Global().Set("bombObjectClass", int(bombObjectClass))
	js.Global().Set("explosionObjectClass", int(explosionObjectClass))
}

func setGameAPI() {
	game = newGame()
	js.Global().Set("wasmAdd", Add(game))
	js.Global().Set("wasmHas", Has(game))
	js.Global().Set("wasmDelete", Delete(game))
	js.Global().Set("wasmSetPlayerData", SetPlayerData(game))
	js.Global().Set("wasmSetObjectData", SetObjectData(game))
	js.Global().Set("wasmLoadLevel", LoadLevel(game))
	js.Global().Set("wasmUpdateState", UpdateState(game))
}

func Add(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 3 {
			fmt.Println("Expected 3 argument(s), got ", len(args))
			return nil
		}

		space := IdSpaceType(args[0].Int())
		id := IdType(args[1].Int())
		pos := args[2].Get("Pos")
		dim := args[2].Get("Dim")
		class := ObjectClassType(args[2].Get("C").Int())

		init := NewInit(Id(space, id), class, parseVec2(pos), parseVec2(dim))
		g.add(init)
		return nil
    })
}

func Has(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Expected 2 argument(s), got ", len(args))
			return nil
		}

		space := IdSpaceType(args[0].Int())
		id := IdType(args[1].Int())
		return g.has(Id(space, id))
    })
}

func Delete(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Expected 2 argument(s), got ", len(args))
			return nil
		}

		space := IdSpaceType(args[0].Int())
		id := IdType(args[1].Int())
		g.delete(Id(space, id))
		return nil
    })
}

func SetPlayerData(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Expected 2 argument(s), got ", len(args))
			return nil
		}

		id := IdType(args[0].Int())
		pos := args[1].Get("Pos")
		vel := args[1].Get("Vel")
		evel := args[1].Get("EVel")
		acc := args[1].Get("Acc")
		dir := args[1].Get("Dir")

		if !g.has(Id(playerIdSpace, id)) {
			fmt.Println("Player does not exist: ", id)
			return nil
		}

		pData := PlayerData {
			Pos: parseVec2(pos),
			Vel: parseVec2(vel),
			EVel: parseVec2(evel),
			Acc: parseVec2(acc),
			Dir: parseVec2(dir),
		}
		g.setPlayerData(id, pData)
		return nil
    })
}

func SetObjectData(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 2 {
			fmt.Println("Expected 2 argument(s), got ", len(args))
			return nil
		}

		id := IdType(args[0].Int())
		pos := args[1].Get("Pos")
		vel := args[1].Get("Vel")

		if !g.has(Id(objectIdSpace, id)) {
			fmt.Println("Object does not exist: ", id)
			return nil
		}

		oData := ObjectData {
			Pos: parseVec2(pos),
			Vel: parseVec2(vel),
		}
		g.setObjectData(id, oData)
		return nil
    })
}

func LoadLevel(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		if len(args) != 1 {
			fmt.Println("Expected 1 argument(s), got ", len(args))
			return nil
		}

		level := args[0].Int()
		g.loadLevel(level)

		objects := g.createObjectInitMsg()
		b, err := json.Marshal(objects)
		if err != nil {
			fmt.Println("wasmLoadLevel: ", err)
			fmt.Println("objects: ", objects)
		}
		return string(b)
	})
}

func UpdateState(g *Game) js.Func {  
    return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		g.updateState()
		state := g.createGameStateMsg()
		b, err := json.Marshal(state)
		if err != nil {
			fmt.Println("wasmUpdateState: ", err)
			fmt.Println("state: ", state)
		}
		return string(b)
    })
}

func parseVec2(vec js.Value) Vec2 {
	return NewVec2(vec.Get("X").Float(), vec.Get("Y").Float())
}